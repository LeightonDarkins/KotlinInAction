package chapterFour.ClassDelegation

// this class intends to decorate the Collection class
// it extends the default Collection class
// it stores and instance of an ArrayList
// it delegates method behaviour to that ArrayList
// any methods that need to be overridden can be overridden within DelegatingCollection
// methods that don't need to be overridden are generated by the Kotlin compiler
class DelegatingCollection<T>(innerList: Collection<T> = ArrayList()) : Collection<T> by innerList

class CountingSet<T>(val innerSet: MutableCollection<T> = HashSet()) : MutableCollection<T> by innerSet {
    var objectsAdded: Int = 0

    override fun add(element: T): Boolean {
        objectsAdded++
        return innerSet.add(element)
    }

    override fun addAll(elements: Collection<T>): Boolean {
        objectsAdded += elements.size
        return innerSet.addAll(elements)
    }
}

fun main(args: Array<String>) {
    val countingSet = CountingSet<Int>()
    countingSet.addAll(listOf(1,2,3))
    println("${countingSet.objectsAdded} have been added")
}